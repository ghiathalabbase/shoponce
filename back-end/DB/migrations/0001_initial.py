# Generated by Django 4.1.5 on 2023-02-24 11:08

import DB.models
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.TextField()),
                ('main_image', models.ImageField(blank=True, null=True, upload_to='stores_images')),
                ('telegram_account', models.URLField(blank=True, null=True)),
                ('is_centeral', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CategoriesStores',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='FavouriteCategories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.category')),
            ],
        ),
        migrations.CreateModel(
            name='FavouriteProducts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FavouriteTags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('rate', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('price', models.IntegerField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('main_image', models.ImageField(blank=True, null=True, upload_to='products_images')),
                ('description', models.TextField(null=True)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.branch')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='DB.category')),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('rate', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('description', models.TextField(blank=True, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='stores_images')),
                ('categories', models.ManyToManyField(through='DB.CategoriesStores', to='DB.category')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='DB.category')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'This username is already taken, use another.'}, max_length=60, unique=True, validators=[DB.models.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(error_messages={'unique': 'This email is already taken, user another.'}, max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TagsStores',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.store')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.tag')),
            ],
        ),
        migrations.AddField(
            model_name='tag',
            name='stores',
            field=models.ManyToManyField(through='DB.TagsStores', to='DB.store'),
        ),
        migrations.AddField(
            model_name='store',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profiles_images')),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='DB.city')),
                ('country', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='DB.country')),
                ('favos_categories', models.ManyToManyField(through='DB.FavouriteCategories', to='DB.category')),
                ('favos_products', models.ManyToManyField(through='DB.FavouriteProducts', to='DB.product')),
                ('favos_tags', models.ManyToManyField(through='DB.FavouriteTags', to='DB.tag')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProductImages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='products_images')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.product')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='tag',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='DB.tag'),
        ),
        migrations.AddField(
            model_name='favouritetags',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.profile'),
        ),
        migrations.AddField(
            model_name='favouritetags',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.tag'),
        ),
        migrations.AddField(
            model_name='favouriteproducts',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.product'),
        ),
        migrations.AddField(
            model_name='favouriteproducts',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.profile'),
        ),
        migrations.AddField(
            model_name='favouritecategories',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.profile'),
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('duration', models.FloatField(null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.product')),
            ],
        ),
        migrations.AddField(
            model_name='city',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.country'),
        ),
        migrations.AddField(
            model_name='category',
            name='stores',
            field=models.ManyToManyField(through='DB.CategoriesStores', to='DB.store'),
        ),
        migrations.AddField(
            model_name='categoriesstores',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.category'),
        ),
        migrations.AddField(
            model_name='categoriesstores',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.store'),
        ),
        migrations.CreateModel(
            name='BranchImages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='stores_images')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.branch')),
            ],
        ),
        migrations.AddField(
            model_name='branch',
            name='city',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='DB.city'),
        ),
        migrations.AddField(
            model_name='branch',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.store'),
        ),
    ]
